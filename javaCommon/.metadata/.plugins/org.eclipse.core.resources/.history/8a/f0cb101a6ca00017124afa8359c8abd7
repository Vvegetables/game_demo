package pat;

import java.util.Scanner;

/**
 * String -> int(Integer.parse(String))
 * @author home
 *
 */

public class P1024 {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		String first = sc.next();
		String second = sc.next();
		String[] firstF = first.split("/");
		String[] secondF = second.split("/");
		//System.out.println(firstF[1]);
		int firInt = Integer.parseInt(firstF[0]);
		int fir_fenInt = Integer.parseInt(firstF[1]);
		
		int secInt = Integer.parseInt(secondF[0]);
		int sec_fenInt = Integer.parseInt(secondF[1]);
		
		//第一个数字的最简形式
		
		int maxTemp = maxNum(firInt,fir_fenInt);
		
		int jia = firInt / fir_fenInt;
		int fen = (firInt % fir_fenInt) / maxTemp;
		int mu = fir_fenInt / maxTemp;
		//第二个数字的最简形式
		
		maxTemp = maxNum(secInt,sec_fenInt);
		int jia2 = secInt / sec_fenInt;
		int fen2 = (secInt % sec_fenInt) / maxTemp;
		int mu2 = sec_fenInt / maxTemp;
		
		String s_jia = "",s_jia2 = "";
		if(jia != 0){
			s_jia = String.valueOf(jia);
		}
		if(jia2 != 0){
			s_jia2 = String.valueOf(jia);
		}
		
		//加法
		//1.通分
		maxTemp = maxNum(fir_fenInt,sec_fenInt);
		//通分分母
		int fenMu = fir_fenInt * sec_fenInt / maxTemp;
		//通分分子和
		int zi_he = firInt * sec_fenInt / maxTemp + secInt * fir_fenInt / maxTemp;
		//2.化简
		maxTemp = maxNum(zi_he,fenMu);
		//化简分子
		int sumZi = (zi_he % fenMu) / maxTemp;
		//化简分母
		int sumMu = fenMu / maxTemp;
		//3.输出
		
		
		System.out.println(s_jia + " " + fen + " / " + mu + " + " 
				+ jia2 + " " + fen2 + "/" + mu2 + " = " 
				+ (zi_he / fenMu) + " " + sumZi + "/" + sumMu);	
		
		//减法
		maxTemp = maxNum(fir_fenInt,sec_fenInt);
		//通分分母
		fenMu = fir_fenInt * sec_fenInt / maxTemp;
		//通分分子和
		zi_he = firInt * sec_fenInt / maxTemp - secInt * fir_fenInt / maxTemp;
		//2.化简
		maxTemp = maxNum(zi_he,fenMu);
		//化简分子
		sumZi = (zi_he % fenMu) / maxTemp;
		//化简分母
		sumMu = fenMu / maxTemp;
		//3.输出
		System.out.println(jia + " " + fen + " / " + mu + " - " 
				+ jia2 + " " + fen2 + "/" + mu2 + " = " 
				+ (zi_he / fenMu) + " " + sumZi + "/" + sumMu);	
		
		//乘法
		zi_he = firInt * secInt;
		fenMu = fir_fenInt * sec_fenInt;
		//2.化简
		maxTemp = maxNum(zi_he,fenMu);
		//化简分子
		sumZi = (zi_he % fenMu) / maxTemp;
		//化简分母
		sumMu = fenMu / maxTemp;
		//3.输出
		System.out.println(jia + " " + fen + " / " + mu + " * " 
				+ jia2 + " " + fen2 + "/" + mu2 + " = " 
				+ (zi_he / fenMu) + " " + sumZi + "/" + sumMu);
		
		//除法
		zi_he = firInt * sec_fenInt;
		fenMu = fir_fenInt * secInt;
		//2.化简
		maxTemp = maxNum(zi_he,fenMu);
		//化简分子
		sumZi = (zi_he % fenMu) / maxTemp;
		//化简分母
		sumMu = fenMu / maxTemp;
		//3.输出
		System.out.println(jia + " " + fen + " / " + mu + " / " 
				+ jia2 + " " + fen2 + "/" + mu2 + " = " 
				+ (zi_he / fenMu) + " " + sumZi + "/" + sumMu);
		
		
	}
	
	public static int maxNum(int fir,int sec){
		if(fir < sec){
			int temp = fir ;
			fir = sec;
			sec = temp;
		}
		while((fir % sec) != 0){
			int k = fir;
			fir = sec;
			sec = k % fir;
		}
		return sec;
	}

}
