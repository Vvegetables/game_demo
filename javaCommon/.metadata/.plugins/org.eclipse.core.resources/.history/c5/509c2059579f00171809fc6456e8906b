package pat;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import java.util.Set;

class StuStruct{
	private int id;
	private int lScore;
	private int hScore;
	public int getId() {
		return id;
	}
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + hScore;
		result = prime * result + id;
		result = prime * result + lScore;
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		StuStruct other = (StuStruct) obj;
		if (hScore != other.hScore)
			return false;
		if (id != other.id)
			return false;
		if (lScore != other.lScore)
			return false;
		return true;
	}
	public void setId(int id) {
		this.id = id;
	}
	public int getlScore() {
		return lScore;
	}
	public void setlScore(int lScore) {
		this.lScore = lScore;
	}
	public int gethScore() {
		return hScore;
	}
	public void sethScore(int hScore) {
		this.hScore = hScore;
	}
	public StuStruct(int id, int lScore, int hScore) {
		super();
		this.id = id;
		this.lScore = lScore;
		this.hScore = hScore;
	}
	
}

public class P1005 {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		int count = sc.nextInt();
		int lScore = sc.nextInt();
		int hScore = sc.nextInt();
		List<StuStruct> list = new ArrayList<StuStruct>();
		Set<StuStruct> set = new HashSet<StuStruct>();
		int stuId = Integer.MAX_VALUE,stuLScore = 0,stuHScore = 0;
		for(int i = 0; i < count; i++){
			stuId = sc.nextInt();
			stuLScore = sc.nextInt();
			stuHScore = sc.nextInt();
			
			if(stuLScore >= lScore){
				set.add(new StuStruct(stuId, stuLScore, stuHScore));
			}
		}
		Iterator<StuStruct> it = set.iterator();
		List<StuStruct> buf = new ArrayList<StuStruct>(); 
		StuStruct max = new StuStruct(Integer.MAX_VALUE,0,0);
		while(it.hasNext()){
			for(Iterator<StuStruct> i = set.iterator(); i.hasNext();){
				if(i.next().gethScore() >= stuHScore && i.next().getlScore() >= stuLScore){
					if(max.getlScore() + max.gethScore() > 
						i.next().getlScore() + i.next().gethScore()){
						
						max.setId(i.next().getId());
						max.setlScore(i.next().getlScore());
						max.sethScore(i.next().gethScore());
					}else if(max.getlScore() + max.gethScore() == 
						i.next().getlScore() + i.next().gethScore()){
						
						if(max.getlScore() < i.next().getlScore()){
							max.setId(i.next().getId());
							max.setlScore(i.next().getlScore());
							max.sethScore(i.next().gethScore());
						}else if(max.getlScore() == i.next().getlScore()){
							if(max.getId() > i.next().getId()){
								max.setId(i.next().getId());
								max.setlScore(i.next().getlScore());
								max.sethScore(i.next().gethScore());
							}
						}
					}
				}
			}
		}
		

	}

}
